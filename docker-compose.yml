version: "3"
services:
  evam:
    build: ./evam
    image: intel_sra/evam
    hostname: evam
    container_name: sra-evam
    privileged: true
    tty: true
    ports:
      - '${EVAM_EXPOSED_PORT}:${EVAM_PORT}'
      - '${RTSP_PORT}:${RTSP_PORT}'
    env_file:
      - .env
    networks:
      - app_network
    environment:
      - ENABLE_RTSP=true
      - RTSP_PORT=8554
      - ENABLE_WEBRTC=true
      - WEBRTC_SIGNALING_SERVER=ws://${HOST_IP}:${SIGNALING_PORT}
      - RUN_MODE=EVA
      # Default Detection and Classification Devicecdo
    volumes:
      - "./pipelines/:/home/pipeline-server/pipelines/"
      - "./models:/home/pipeline-server/models/"
      - "${VIDEO_SRC_DIR}:/data"
      - "/tmp:/tmp"
      - "${PYTHON_POST_PROCESS_DIR}:/home/pipeline-server/extensions/sra"

  grafana:
    build: ./grafana
    image: intel_sra/grafana
    container_name: sra-grafana
    hostname: grafana
    user: "1000"
    env_file:
      - .env
    environment:
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/etc/dashboards/dashboard.json
    ports:
      - ${GRAFANA_EXPOSED_PORT}:${GRAFANA_PORT}
    networks:
      - app_network
    volumes:
      - "grafana-data:/var/lib/grafana"
    cap_drop:
      - NET_ADMIN
      - SYS_ADMIN
      - SYS_MODULE
    security_opt:
      - apparmor:unconfined
    ulimits:
      nproc: 65535
      nofile:
        soft: 20000
        hard: 40000
    healthcheck:
      test: ["CMD", "curl", "-fL", "http://localhost:${GRAFANA_PORT}"]
      interval: 1m30s
      timeout: 10s
      retries: 3

  server:
    image: jkalapati/server:1.0
    hostname: server
    networks:
      - app_network
    env_file:
      - .env
    ports:
      - "${SERVER_EXPOSED_PORT}:${SERVER_PORT}"
      - "${STREAM_PUB_EXPOSED_PORT}:${STREAM_PUB_PORT}"
    container_name: server

  viewer:
    image: jkalapati/viewer:3.0
    hostname: viewer
    networks:
      - app_network
    env_file:
      - .env
    ports:
      - "${VIEWER_EXPOSED_PORT}:${VIEWER_PORT}"
    container_name: viewer
  
  node-red:
    image: nodered/node-red:3.0.2
    container_name: sra-nodered
    hostname: nodered
    env_file:
      - .env
    networks:
      - app_network
    ports:
      - "${NODERED_EXPOSED_PORT}:${NODERED_PORT}"
    volumes:
      - "${NODERED_HOME}:/data"

  code-server:
    image: lscr.io/linuxserver/code-server:latest
    container_name: code-server
    hostname: code-server
    restart: unless-stopped
    depends_on: 
      - node-red
    env_file:
      - .env
    networks:
      - app_network
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
    ports:
      - "${CODE_SERVER_EXPOSED_PORT}:${CODE_SERVER_PORT}"
    volumes:
      - "${NODERED_HOME}/lib:/config/workspace"

volumes:
  grafana-data:


networks:
  app_network:
    driver: "bridge"
